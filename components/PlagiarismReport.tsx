"use client"

import { useState } from "react"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Badge } from "@/components/ui/badge"
import { Progress } from "@/components/ui/progress"
import { Download, FileText, AlertTriangle, CheckCircle, Clock } from "lucide-react"
import { motion } from "framer-motion"

interface PlagiarismReportProps {
  report: {
    id: string
    appName: string
    assignment: {
      name: string
      dateGiven: string
      dateSubmitted: string
      dueDate: string
      maxMarks: number
    }
    student: {
      name: string
      email: string
      department: string
      year: string
    }
    plagiarism: {
      percentage: number
      status: string
      checkedAt: string
      sources: Array<{
        url: string
        title: string
        similarity: number
        matchedText?: string
      }>
    }
    grading: {
      grade?: number
      feedback?: string
      gradedAt?: string
      autoGrade?: number
    }
    generatedAt: string
  }
  onDownload?: () => void
}

export default function PlagiarismReport({ report, onDownload }: PlagiarismReportProps) {
  const [isDownloading, setIsDownloading] = useState(false)

  const handleDownload = async () => {
    setIsDownloading(true)
    try {
      // Generate PDF report
      const response = await fetch(`/api/plagiarism/download/${report.id}`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(report)
      })
      
      if (response.ok) {
        const blob = await response.blob()
        const url = window.URL.createObjectURL(blob)
        const a = document.createElement('a')
        a.href = url
        a.download = `plagiarism-report-${report.assignment.name.replace(/\s+/g, '-')}.pdf`
        document.body.appendChild(a)
        a.click()
        window.URL.revokeObjectURL(url)
        document.body.removeChild(a)
      }
      
      onDownload?.()
    } catch (error) {
      console.error('Download failed:', error)
    } finally {
      setIsDownloading(false)
    }
  }

  const getStatusColor = (status: string) => {
    switch (status.toLowerCase()) {
      case 'high risk': return 'bg-red-100 text-red-800 border-red-200'
      case 'medium risk': return 'bg-yellow-100 text-yellow-800 border-yellow-200'
      case 'low risk': return 'bg-green-100 text-green-800 border-green-200'
      default: return 'bg-gray-100 text-gray-800 border-gray-200'
    }
  }

  const getStatusIcon = (status: string) => {
    switch (status.toLowerCase()) {
      case 'high risk': return <AlertTriangle className="w-4 h-4" />
      case 'medium risk': return <Clock className="w-4 h-4" />
      case 'low risk': return <CheckCircle className="w-4 h-4" />
      default: return <FileText className="w-4 h-4" />
    }
  }

  return (
    <motion.div
      initial={{ opacity: 0, y: 20 }}
      animate={{ opacity: 1, y: 0 }}
      className="max-w-4xl mx-auto p-6 space-y-6"
    >
      {/* Header */}
      <div className="flex items-center justify-between">
        <div>
          <h1 className="text-3xl font-bold text-gray-900">Plagiarism Report</h1>
          <p className="text-gray-600 mt-1">Generated by {report.appName}</p>
        </div>
        <Button onClick={handleDownload} disabled={isDownloading} className="flex items-center gap-2">
          <Download className="w-4 h-4" />
          {isDownloading ? 'Downloading...' : 'Download PDF'}
        </Button>
      </div>

      {/* Assignment Details */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <FileText className="w-5 h-5" />
            Assignment Details
          </CardTitle>
        </CardHeader>
        <CardContent className="grid md:grid-cols-2 gap-4">
          <div>
            <p className="text-sm text-gray-600">Assignment Name</p>
            <p className="font-semibold">{report.assignment.name}</p>
          </div>
          <div>
            <p className="text-sm text-gray-600">Maximum Marks</p>
            <p className="font-semibold">{report.assignment.maxMarks}</p>
          </div>
          <div>
            <p className="text-sm text-gray-600">Date Given</p>
            <p className="font-semibold">{new Date(report.assignment.dateGiven).toLocaleDateString()}</p>
          </div>
          <div>
            <p className="text-sm text-gray-600">Due Date</p>
            <p className="font-semibold">{new Date(report.assignment.dueDate).toLocaleDateString()}</p>
          </div>
          <div>
            <p className="text-sm text-gray-600">Date Submitted</p>
            <p className="font-semibold">
              {new Date(report.assignment.dateSubmitted).toLocaleDateString()} at{' '}
              {new Date(report.assignment.dateSubmitted).toLocaleTimeString()}
            </p>
          </div>
        </CardContent>
      </Card>

      {/* Student Details */}
      <Card>
        <CardHeader>
          <CardTitle>Student Information</CardTitle>
        </CardHeader>
        <CardContent className="grid md:grid-cols-2 gap-4">
          <div>
            <p className="text-sm text-gray-600">Student Name</p>
            <p className="font-semibold">{report.student.name}</p>
          </div>
          <div>
            <p className="text-sm text-gray-600">Email</p>
            <p className="font-semibold">{report.student.email}</p>
          </div>
          <div>
            <p className="text-sm text-gray-600">Department</p>
            <p className="font-semibold">{report.student.department}</p>
          </div>
          <div>
            <p className="text-sm text-gray-600">Year</p>
            <p className="font-semibold">{report.student.year}</p>
          </div>
        </CardContent>
      </Card>

      {/* Plagiarism Analysis */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center justify-between">
            <span>Plagiarism Analysis</span>
            <Badge className={getStatusColor(report.plagiarism.status)}>
              {getStatusIcon(report.plagiarism.status)}
              {report.plagiarism.status}
            </Badge>
          </CardTitle>
        </CardHeader>
        <CardContent className="space-y-6">
          <div className="text-center">
            <div className="text-4xl font-bold mb-2" 
                 style={{ color: report.plagiarism.percentage > 20 ? '#ef4444' : 
                                report.plagiarism.percentage > 10 ? '#f59e0b' : '#10b981' }}>
              {report.plagiarism.percentage}%
            </div>
            <p className="text-gray-600">Similarity Detected</p>
            <Progress 
              value={report.plagiarism.percentage} 
              className="mt-4"
              style={{ 
                '--progress-background': report.plagiarism.percentage > 20 ? '#fee2e2' : 
                                       report.plagiarism.percentage > 10 ? '#fef3c7' : '#dcfce7'
              } as any}
            />
          </div>

          <div className="grid md:grid-cols-3 gap-4 text-center">
            <div className="p-4 bg-green-50 rounded-lg">
              <p className="text-2xl font-bold text-green-600">{100 - report.plagiarism.percentage}%</p>
              <p className="text-sm text-gray-600">Original Content</p>
            </div>
            <div className="p-4 bg-red-50 rounded-lg">
              <p className="text-2xl font-bold text-red-600">{report.plagiarism.percentage}%</p>
              <p className="text-sm text-gray-600">Similar Content</p>
            </div>
            <div className="p-4 bg-blue-50 rounded-lg">
              <p className="text-2xl font-bold text-blue-600">{report.plagiarism.sources.length}</p>
              <p className="text-sm text-gray-600">Sources Found</p>
            </div>
          </div>

          <div>
            <p className="text-sm text-gray-600">Checked At</p>
            <p className="font-semibold">
              {new Date(report.plagiarism.checkedAt).toLocaleDateString()} at{' '}
              {new Date(report.plagiarism.checkedAt).toLocaleTimeString()}
            </p>
          </div>
        </CardContent>
      </Card>

      {/* Sources */}
      {report.plagiarism.sources.length > 0 && (
        <Card>
          <CardHeader>
            <CardTitle>Detected Sources</CardTitle>
          </CardHeader>
          <CardContent className="space-y-4">
            {report.plagiarism.sources.map((source, index) => (
              <div key={index} className="border rounded-lg p-4">
                <div className="flex items-center justify-between mb-2">
                  <h4 className="font-semibold">{source.title}</h4>
                  <Badge variant="outline">{source.similarity}% similarity</Badge>
                </div>
                <p className="text-sm text-blue-600 mb-2">{source.url}</p>
                {source.matchedText && (
                  <div className="bg-gray-50 p-3 rounded text-sm">
                    <p className="text-gray-600 mb-1">Matched Text:</p>
                    <p className="italic">"{source.matchedText}"</p>
                  </div>
                )}
              </div>
            ))}
          </CardContent>
        </Card>
      )}

      {/* Grading Information */}
      {(report.grading.grade !== undefined || report.grading.autoGrade !== undefined) && (
        <Card>
          <CardHeader>
            <CardTitle>Grading Information</CardTitle>
          </CardHeader>
          <CardContent className="space-y-4">
            {report.grading.grade !== undefined && (
              <div className="grid md:grid-cols-2 gap-4">
                <div>
                  <p className="text-sm text-gray-600">Final Grade</p>
                  <p className="text-2xl font-bold text-blue-600">
                    {report.grading.grade}/{report.assignment.maxMarks}
                  </p>
                </div>
                <div>
                  <p className="text-sm text-gray-600">Percentage</p>
                  <p className="text-2xl font-bold text-blue-600">
                    {Math.round((report.grading.grade / report.assignment.maxMarks) * 100)}%
                  </p>
                </div>
              </div>
            )}
            
            {report.grading.autoGrade !== undefined && (
              <div>
                <p className="text-sm text-gray-600">Auto Grade</p>
                <p className="font-semibold">{report.grading.autoGrade}/{report.assignment.maxMarks}</p>
              </div>
            )}

            {report.grading.feedback && (
              <div>
                <p className="text-sm text-gray-600">Feedback</p>
                <p className="bg-gray-50 p-3 rounded">{report.grading.feedback}</p>
              </div>
            )}

            {report.grading.gradedAt && (
              <div>
                <p className="text-sm text-gray-600">Graded At</p>
                <p className="font-semibold">
                  {new Date(report.grading.gradedAt).toLocaleDateString()} at{' '}
                  {new Date(report.grading.gradedAt).toLocaleTimeString()}
                </p>
              </div>
            )}
          </CardContent>
        </Card>
      )}

      {/* Footer */}
      <div className="text-center text-sm text-gray-500 border-t pt-4">
        <p>Report generated on {new Date(report.generatedAt).toLocaleDateString()} at {new Date(report.generatedAt).toLocaleTimeString()}</p>
        <p className="mt-1">Powered by {report.appName} Plagiarism Detection System</p>
      </div>
    </motion.div>
  )
}
