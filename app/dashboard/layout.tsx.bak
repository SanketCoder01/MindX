"use client"

import type React from "react"
import { useState, useEffect } from "react"
import { useRouter, usePathname } from "next/navigation"
import { cn } from "@/lib/utils"
import { Button } from "@/components/ui/button"
import { Sheet, SheetContent, SheetTrigger } from "@/components/ui/sheet"
import { Menu, User, LogOut, Home, BookOpen, MessageSquare, Users, FileText, Code, Calendar, Bell, Settings } from "lucide-react"
import { Camera } from "lucide-react"
import { FirstTimeSetup } from "@/components/attendance/first-time-setup"

interface UserData {
  id: string
  name: string
  email: string
  faceRegistered: boolean
}

export default function FacultyDashboardLayout({
  children,
}: {
  children: React.ReactNode
}) {
  const [user, setUser] = useState<UserData | null>(null);
  const [isLoading, setIsLoading] = useState(true);
  const [isMobileMenuOpen, setIsMobileMenuOpen] = useState(false);
  const [showFaceSetup, setShowFaceSetup] = useState(false);
  const router = useRouter();
  const pathname = usePathname();

  useEffect(() => {
    const checkUser = () => {
      const userData = localStorage.getItem("currentUser");
      if (!userData) {
        router.push("/login");
        return;
      }

      try {
        const parsedUser = JSON.parse(userData);
        setUser(parsedUser);
        if (!parsedUser.faceRegistered && pathname !== "/faculty/face-capture") {
          setShowFaceSetup(true);
        }
      } catch (error) {
        console.error("Error parsing user data:", error);
        router.push("/login");
      } finally {
        setIsLoading(false);
      }
    };

    checkUser();
  }, [router, pathname]);

  const navigation = [
    { icon: Home, label: "Dashboard", href: "/dashboard", color: "text-blue-600" },
    { icon: Camera, label: "Attendance", href: "/dashboard/attendance", color: "text-emerald-600" },
    { icon: FileText, label: "Assignments", href: "/dashboard/assignments", color: "text-amber-600" },
    { icon: Users, label: "Students", href: "/dashboard/students", color: "text-purple-600" },
    { icon: MessageSquare, label: "Queries", href: "/dashboard/queries", color: "text-pink-600" },
    { icon: Bell, label: "Announcements", href: "/dashboard/announcements", color: "text-red-600" },
    { icon: Calendar, label: "Schedule", href: "/dashboard/schedule", color: "text-indigo-600" },
  ]

  const handleLogout = () => {
    localStorage.removeItem("currentUser")
    router.push("/")
  }

  if (!user) {
    return null // or a loading spinner
  }

  return (
    <div className="flex h-screen bg-gray-50">
      {/* Mobile sidebar */}
      <div className="lg:hidden">
        <Sheet open={isMobileMenuOpen} onOpenChange={setIsMobileMenuOpen}>
          <SheetTrigger asChild>
            <Button variant="ghost" size="icon" className="fixed top-4 left-4 z-50">
              <Menu className="h-6 w-6" />
            </Button>
          </SheetTrigger>
          <SheetContent side="left" className="w-[280px] p-0">
            <div className="flex flex-col h-full">
              <div className="flex items-center justify-between p-4 border-b">
                <h2 className="text-xl font-semibold">EduVision</h2>
              </div>
              <nav className="flex-1 p-4 space-y-2">
                {navigation.map((item) => (
                  <a
                    key={item.href}
                    href={item.href}
                    className={cn(
                      "flex items-center gap-3 rounded-lg px-3 py-2 text-sm font-medium transition-colors hover:bg-gray-100",
                      pathname === item.href ? "bg-gray-100" : ""
                    )}
                    onClick={() => setIsMobileMenuOpen(false)}
                  >
                    <item.icon className={cn("h-5 w-5", item.color)} />
                    {item.label}
                  </a>
                ))}
              </nav>
              <div className="p-4 border-t">
                <button
                  onClick={handleLogout}
                  className="flex w-full items-center gap-3 rounded-lg px-3 py-2 text-sm font-medium text-red-600 hover:bg-red-50"
                >
                  <LogOut className="h-5 w-5" />
                  Logout
                </button>
              </div>
            </div>
          </SheetContent>
        </Sheet>
      </div>

      {/* Desktop sidebar */}
      <div className="hidden lg:flex lg:flex-shrink-0">
        <div className="flex w-64 flex-col border-r border-gray-200 bg-white">
          <div className="flex h-16 flex-shrink-0 items-center px-6">
            <h1 className="text-xl font-semibold">EduVision</h1>
          </div>
          <div className="flex flex-1 flex-col overflow-y-auto">
            <nav className="flex-1 space-y-1 px-2 py-4">
              {navigation.map((item) => (
                <a
                  key={item.href}
                  href={item.href}
                  className={cn(
                    "group flex items-center rounded-md px-3 py-2 text-sm font-medium",
                    pathname === item.href
                      ? "bg-gray-100 text-gray-900"
                      : "text-gray-600 hover:bg-gray-50 hover:text-gray-900"
                  )}
                >
                  <item.icon
                    className={cn(
                      "mr-3 h-5 w-5 flex-shrink-0",
                      item.color
                    )}
                    aria-hidden="true"
                  />
                  {item.label}
                </a>
              ))}
            </nav>
            <div className="flex flex-shrink-0 border-t border-gray-200 p-4">
              <button
                onClick={handleLogout}
                className="group block w-full flex-shrink-0"
              >
                <div className="flex items-center">
                  <div className="flex items-center">
                    <LogOut className="h-5 w-5 text-red-600 group-hover:text-red-700" />
                    <span className="ml-3 text-sm font-medium text-red-600 group-hover:text-red-700">
                      Logout
                    </span>
                  </div>
                </div>
              </button>
            </div>
          </div>
        </div>
      </div>

      {/* Main content */}
      <div className="flex flex-1 flex-col overflow-hidden">
        <header className="bg-white shadow-sm">
          <div className="flex h-16 items-center justify-between px-4 sm:px-6 lg:px-8">
            <div className="flex items-center lg:hidden">
              <h1 className="text-lg font-semibold">
                {navigation.find((item) => item.href === pathname)?.label || 'Dashboard'}
              </h1>
            </div>
            <div className="flex items-center">
              <div className="relative">
                <button
                  type="button"
                  className="flex rounded-full bg-white text-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2"
                  id="user-menu-button"
                  aria-expanded="false"
                  aria-haspopup="true"
                  onClick={() => router.push('/dashboard/profile')}
                >
                  <span className="sr-only">Open user menu</span>
                  <div className="h-8 w-8 rounded-full bg-blue-100 flex items-center justify-center">
                    <User className="h-5 w-5 text-blue-600" />
                  </div>
                </button>
              </div>
            </div>
          </div>
        </header>

        {/* Main content area */}
        <main className="flex-1 overflow-y-auto bg-gray-50 p-4 sm:p-6 lg:p-8">
          {children}
        </main>
      </div>

      {/* Face setup modal */}
      {showFaceSetup && (
        <FirstTimeSetup
          user_id={user.id}
          user_name={user.name}
          user_type="faculty"
          onComplete={() => {
            const currentUserStr = localStorage.getItem("currentUser");
            if (currentUserStr) {
              try {
                const currentUser = JSON.parse(currentUserStr);
                const updatedUser = { ...currentUser, faceRegistered: true };
                localStorage.setItem("currentUser", JSON.stringify(updatedUser));

                // Update state for a smooth UI transition before the reload
                setUser(updatedUser);
                setShowFaceSetup(false);

                // Force a reload to ensure the entire app uses the fresh data
                window.location.href = "/dashboard";
              } catch (error) {
                console.error("Failed to update user data after face setup:", error);
              }
            }
          }}
        />
      )}
    </div>
  )
}
