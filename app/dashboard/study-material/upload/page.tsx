"use client"

import { useState } from 'react';
import { motion } from 'framer-motion';
import { ArrowLeft, Upload, Bot, CheckCircle, Loader2 } from 'lucide-react';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Label } from '@/components/ui/label';
import { Input } from '@/components/ui/input';
import { Textarea } from '@/components/ui/textarea';
import { Alert, AlertDescription } from '@/components/ui/alert';
import { Switch } from '@/components/ui/switch';
import { uploadStudyMaterial } from '../actions';
import { GoogleGenerativeAI } from '@google/generative-ai';

// Initialize Gemini AI for AI summarizer
const genAI = new GoogleGenerativeAI(process.env.NEXT_PUBLIC_GEMINI_API_KEY || 'AIzaSyAYdxFs0tzqXoI-mDZ4NLT-KhSf3huF7b4');
import { useRouter } from 'next/navigation';

export default function UploadStudyMaterialPage() {
  const router = useRouter();
  const [selectedFile, setSelectedFile] = useState<File | null>(null);
  const [formData, setFormData] = useState({
    department: '',
    year: '',
    subject: '',
    title: '',
    description: '',
  });
  const [isUploading, setIsUploading] = useState(false);
  const [error, setError] = useState('');
  const [dragActive, setDragActive] = useState(false);
  const [aiSummarizerEnabled, setAiSummarizerEnabled] = useState(false);
  const [isGeneratingSummary, setIsGeneratingSummary] = useState(false);
  const [uploadSuccess, setUploadSuccess] = useState(false);
  const [summaryGenerated, setSummaryGenerated] = useState(false);

  const departments = [
    'Computer Science and Engineering (CSE)',
    'Cyber Security',
    'Artificial Intelligence and Data Science (AIDS)',
    'Artificial Intelligence and Machine Learning (AIML)',
    'Electronics and Communication Engineering (ECE)',
    'Electrical and Electronics Engineering (EEE)',
    'Mechanical Engineering (ME)',
    'Civil Engineering (CE)',
    'Information Technology (IT)',
    'Biotechnology (BT)',
    'Chemical Engineering (CHE)',
    'Aerospace Engineering (AE)',
    'Automobile Engineering (AUTO)',
    'Industrial Engineering (IE)',
    'Environmental Engineering (ENV)',
    'Biomedical Engineering (BME)',
    'Materials Science and Engineering (MSE)',
    'Petroleum Engineering (PE)',
    'Mining Engineering (MIN)',
    'Agricultural Engineering (AGE)',
  ];

  const years = ['1', '2', '3', '4'];

  const subjects = [
    'Mathematics', 'Physics', 'Chemistry', 'Data Structures', 'Algorithms',
    'Database Systems', 'Computer Networks', 'Operating Systems', 'Software Engineering',
    'Machine Learning', 'Artificial Intelligence', 'Cyber Security Fundamentals',
    'Web Development', 'Mobile App Development', 'Cloud Computing'
  ];

  const handleDrag = (e: React.DragEvent) => {
    e.preventDefault();
    e.stopPropagation();
    if (e.type === 'dragenter' || e.type === 'dragover') {
      setDragActive(true);
    } else if (e.type === 'dragleave') {
      setDragActive(false);
    }
  };

  const handleDrop = (e: React.DragEvent) => {
    e.preventDefault();
    e.stopPropagation();
    setDragActive(false);
    
    if (e.dataTransfer.files && e.dataTransfer.files[0]) {
      setSelectedFile(e.dataTransfer.files[0]);
    }
  };

  const handleFileSelect = (e: React.ChangeEvent<HTMLInputElement>) => {
    if (e.target.files && e.target.files[0]) {
      setSelectedFile(e.target.files[0]);
    }
  };

  const handleInputChange = (field: string, value: string) => {
    setFormData(prev => ({ ...prev, [field]: value }));
  };

  const generateAISummary = async (file: File): Promise<File> => {
    try {
      // Use Gemini AI to generate summary
      const model = genAI.getGenerativeModel({ model: "gemini-pro" });
      
      const prompt = `Create a comprehensive educational summary for this study material:
      
      File: ${file.name}
      Type: ${file.type}
      Subject: ${formData.subject}
      Department: ${formData.department}
      
      Generate a structured summary with:
      1. Overview (2-3 sentences)
      2. Key Topics (bullet points)
      3. Learning Objectives (3-4 points)
      4. Important Concepts
      5. Study Tips
      
      Make it educational and student-friendly.`;

      const result = await model.generateContent(prompt);
      const response = await result.response;
      const aiSummary = response.text();

      const summaryContent = `AI-Generated Study Material Summary
Generated on: ${new Date().toLocaleDateString()}
Original File: ${file.name}
Subject: ${formData.subject}
Department: ${formData.department}

${aiSummary}

---
Generated by EduVision AI Assistant using Gemini AI`;

      // Create summary file
      const summaryBlob = new Blob([summaryContent], { type: 'text/plain' });
      return new File([summaryBlob], `${file.name.split('.')[0]}_AI_Summary.txt`, {
        type: 'text/plain'
      });
    } catch (error) {
      console.error('AI summary generation failed:', error);
      
      // Fallback summary
      const fallbackContent = `Study Material Summary
Generated on: ${new Date().toLocaleDateString()}
Original File: ${file.name}
Subject: ${formData.subject}
Department: ${formData.department}

This document has been uploaded to EduVision platform.

Key Information:
- File Type: ${file.type}
- File Size: ${(file.size / 1024 / 1024).toFixed(2)} MB
- Upload Date: ${new Date().toLocaleDateString()}

Note: AI summary generation was not available. This is a basic summary.

Generated by EduVision Platform`;

      const summaryBlob = new Blob([fallbackContent], { type: 'text/plain' });
      return new File([summaryBlob], `${file.name.split('.')[0]}_Summary.txt`, {
        type: 'text/plain'
      });
      setIsGeneratingSummary(false);
    }
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    console.log('Form submitted');
    setError('');

    // Validation
    if (!selectedFile) {
      setError('Please select a file to upload.');
      return;
    }
    if (!formData.department) {
      setError('Please select a department.');
      return;
    }
    if (!formData.year) {
      setError('Please select a year.');
      return;
    }
    if (!formData.subject) {
      setError('Please select a subject.');
      return;
    }
    if (!formData.title.trim()) {
      setError('Please enter a title.');
      return;
    }

    console.log('Validation passed, starting upload...');
    setIsUploading(true);

    try {
      // Upload original file
      const submitData = new FormData();
      submitData.append('file', selectedFile);
      submitData.append('department', formData.department);
      submitData.append('year', formData.year);
      submitData.append('subject', formData.subject);
      submitData.append('title', formData.title);
      submitData.append('description', formData.description);

      console.log('Uploading original file...');
      const result = await uploadStudyMaterial(submitData);
      console.log('Upload result:', result);

      if (result.error) {
        setError(result.error.message);
        setIsUploading(false);
        return;
      }

      console.log('Original file uploaded successfully');

      // Generate and upload AI summary if enabled
      if (aiSummarizerEnabled) {
        console.log('AI Summarizer enabled, generating summary...');
        try {
          const summaryFile = await generateAISummary(selectedFile);
          console.log('AI summary generated, uploading...');
          
          const summaryData = new FormData();
          summaryData.append('file', summaryFile);
          summaryData.append('department', formData.department);
          summaryData.append('year', formData.year);
          summaryData.append('subject', formData.subject);
          summaryData.append('title', `${formData.title} - AI Summary`);
          summaryData.append('description', `AI-generated summary of: ${formData.description}`);

          const summaryResult = await uploadStudyMaterial(summaryData);
          console.log('Summary upload result:', summaryResult);
          
          if (!summaryResult.error) {
            setSummaryGenerated(true);
            console.log('AI summary uploaded successfully');
          }
        } catch (summaryError) {
          console.error('Failed to generate/upload summary:', summaryError);
          // Continue with success message even if summary fails
        }
      }

      console.log('Setting upload success...');
      setUploadSuccess(true);
      
    } catch (error) {
      console.error('Upload error:', error);
      setError('Upload failed. Please try again.');
    } finally {
      setIsUploading(false);
      console.log('Upload process completed');
    }
  };

  const formatFileSize = (bytes: number) => {
    if (bytes === 0) return '0 Bytes';
    const k = 1024;
    const sizes = ['Bytes', 'KB', 'MB', 'GB'];
    const i = Math.floor(Math.log(bytes) / Math.log(k));
    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
  };

  const handleBackToList = () => {
    router.push('/dashboard/study-material');
  };

  const handleUploadAnother = () => {
    setUploadSuccess(false);
    setSummaryGenerated(false);
    setAiSummarizerEnabled(false);
    setSelectedFile(null);
    setFormData({
      department: '',
      year: '',
      subject: '',
      title: '',
      description: '',
    });
  };

  return (
    <div className="min-h-screen overflow-y-auto bg-gray-50">
      <div className="container mx-auto px-4 py-6 space-y-6 max-w-4xl">
        {/* Header */}
        <motion.div
          initial={{ opacity: 0, y: -20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.5 }}
          className="space-y-4"
        >
          <Button
            onClick={handleBackToList}
            variant="outline"
            size="sm"
            className="flex items-center gap-2 w-fit"
          >
            <ArrowLeft className="h-4 w-4" />
            <span className="hidden sm:inline">Back to Materials</span>
            <span className="sm:hidden">Back</span>
          </Button>
          <div className="text-center sm:text-left">
            <h1 className="text-xl sm:text-2xl md:text-3xl font-bold text-gray-900 flex items-center justify-center sm:justify-start gap-2 sm:gap-3">
              <Upload className="h-5 w-5 sm:h-6 sm:w-6 md:h-8 md:w-8 text-blue-600" />
              <span className="break-words">Upload Study Material</span>
            </h1>
            <p className="mt-1 text-xs sm:text-sm md:text-base text-gray-600">
              Upload study materials for students by department, year, and subject.
            </p>
          </div>
        </motion.div>

        {/* Upload Form */}
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.5, delay: 0.1 }}
        >
          <Card className="w-full">
            <CardContent className="p-6">
              <form onSubmit={handleSubmit} className="space-y-6">
                {error && (
                  <Alert variant="destructive">
                    <AlertDescription>{error}</AlertDescription>
                  </Alert>
                )}

                {/* Department and Year Selection */}
                <div className="grid grid-cols-1 sm:grid-cols-2 gap-4">
                  <div className="space-y-2">
                    <Label htmlFor="department" className="text-sm font-medium">Department *</Label>
                    <Select onValueChange={(value) => handleInputChange('department', value)} value={formData.department}>
                      <SelectTrigger id="department" className="w-full">
                        <SelectValue placeholder="Select Department" />
                      </SelectTrigger>
                      <SelectContent className="max-h-60 overflow-y-auto">
                        {departments.map((dept) => (
                          <SelectItem key={dept} value={dept} className="text-sm">
                            {dept}
                          </SelectItem>
                        ))}
                      </SelectContent>
                    </Select>
                  </div>
                  <div className="space-y-2">
                    <Label htmlFor="year" className="text-sm font-medium">Year *</Label>
                    <Select onValueChange={(value) => handleInputChange('year', value)} value={formData.year}>
                      <SelectTrigger id="year" className="w-full">
                        <SelectValue placeholder="Select Year" />
                      </SelectTrigger>
                      <SelectContent>
                        {years.map((yr) => (
                          <SelectItem key={yr} value={yr} className="text-sm">
                            {yr}{yr === '1' ? 'st' : yr === '2' ? 'nd' : yr === '3' ? 'rd' : 'th'} Year
                          </SelectItem>
                        ))}
                      </SelectContent>
                    </Select>
                  </div>
                </div>

                {/* Subject and Title */}
                <div className="grid grid-cols-1 sm:grid-cols-2 gap-4">
                  <div className="space-y-2">
                    <Label htmlFor="subject" className="text-sm font-medium">Subject *</Label>
                    <Select onValueChange={(value) => handleInputChange('subject', value)} value={formData.subject}>
                      <SelectTrigger id="subject" className="w-full">
                        <SelectValue placeholder="Select Subject" />
                      </SelectTrigger>
                      <SelectContent className="max-h-60 overflow-y-auto">
                        {subjects.map((subj) => (
                          <SelectItem key={subj} value={subj} className="text-sm">
                            {subj}
                          </SelectItem>
                        ))}
                      </SelectContent>
                    </Select>
                  </div>
                  <div className="space-y-2">
                    <Label htmlFor="title" className="text-sm font-medium">Title *</Label>
                    <Input
                      id="title"
                      placeholder="e.g., Chapter 1 - Introduction"
                      value={formData.title}
                      onChange={(e) => handleInputChange('title', e.target.value)}
                      className="w-full"
                    />
                  </div>
                </div>

                {/* Description */}
                <div className="space-y-2">
                  <Label htmlFor="description" className="text-sm font-medium">Description</Label>
                  <Textarea
                    id="description"
                    placeholder="Brief description of the study material..."
                    value={formData.description}
                    onChange={(e) => handleInputChange('description', e.target.value)}
                    rows={3}
                  />
                </div>

                {/* AI Summarizer Toggle */}
                <div className="space-y-3">
                  <div className="flex flex-col sm:flex-row sm:items-center sm:justify-between gap-3 p-4 border rounded-lg bg-gradient-to-r from-blue-50 to-purple-50">
                    <div className="flex items-center gap-3">
                      <Bot className="h-5 w-5 text-blue-600" />
                      <div>
                        <Label htmlFor="ai-summarizer" className="text-sm font-medium">
                          AI Summarizer
                        </Label>
                        <p className="text-xs text-gray-500 mt-1">
                          Generate AI summary with key points and upload both files
                        </p>
                      </div>
                    </div>
                    <Switch
                      id="ai-summarizer"
                      checked={aiSummarizerEnabled}
                      onCheckedChange={setAiSummarizerEnabled}
                      className="self-start sm:self-center"
                    />
                  </div>
                  
                  {aiSummarizerEnabled && (
                    <motion.div
                      initial={{ opacity: 0, height: 0 }}
                      animate={{ opacity: 1, height: 'auto' }}
                      exit={{ opacity: 0, height: 0 }}
                      className="p-3 bg-green-50 rounded-lg border border-green-200"
                    >
                      <div className="flex items-center gap-2 text-sm text-green-700">
                        <Bot className="h-4 w-4" />
                        <span className="font-medium">AI Summarizer Active</span>
                      </div>
                      <p className="text-xs text-green-600 mt-1">
                        Will create a structured summary PDF with key points and upload both files
                      </p>
                    </motion.div>
                  )}
                </div>

                {/* File Upload Area */}
                <div className="space-y-2">
                  <Label className="text-sm font-medium">Study Material File *</Label>
                  <div
                    className={`relative border-2 border-dashed rounded-lg p-6 transition-colors ${
                      dragActive
                        ? 'border-blue-400 bg-blue-50'
                        : 'border-gray-300 hover:border-gray-400'
                    }`}
                    onDragEnter={handleDrag}
                    onDragLeave={handleDrag}
                    onDragOver={handleDrag}
                    onDrop={handleDrop}
                  >
                    <input
                      type="file"
                      onChange={handleFileSelect}
                      accept=".pdf,.png,.jpg,.jpeg,.xlsx,.xls,.doc,.docx,.ppt,.pptx"
                      className="absolute inset-0 w-full h-full opacity-0 cursor-pointer"
                    />
                    
                    {selectedFile ? (
                      <motion.div
                        initial={{ opacity: 0, scale: 0.9 }}
                        animate={{ opacity: 1, scale: 1 }}
                        className="flex items-center justify-between"
                      >
                        <div className="flex items-center gap-3">
                          <Upload className="h-8 w-8 text-blue-600" />
                          <div>
                            <p className="font-medium text-gray-900">{selectedFile.name}</p>
                            <p className="text-sm text-gray-500">{formatFileSize(selectedFile.size)}</p>
                          </div>
                        </div>
                        <Button
                          type="button"
                          variant="ghost"
                          size="sm"
                          onClick={() => setSelectedFile(null)}
                        >
                          ×
                        </Button>
                      </motion.div>
                    ) : (
                      <div className="text-center">
                        <Upload className="mx-auto h-12 w-12 text-gray-400" />
                        <div className="mt-4">
                          <p className="text-sm font-medium text-gray-900">
                            Drop your study material here, or click to browse
                          </p>
                          <p className="text-xs text-gray-500 mt-1">
                            PDF, Images, Office files up to 25MB
                          </p>
                        </div>
                      </div>
                    )}
                  </div>
                </div>

                <Button 
                  type="submit" 
                  className="w-full py-3 text-base font-medium" 
                  disabled={isUploading || isGeneratingSummary || !selectedFile || !formData.department || !formData.year || !formData.subject || !formData.title}
                >
                  {isUploading || isGeneratingSummary ? (
                    <motion.div
                      animate={{ rotate: 360 }}
                      transition={{ duration: 1, repeat: Infinity, ease: "linear" }}
                      className="mr-2"
                    >
                      {isGeneratingSummary ? <Bot className="h-4 w-4" /> : <Upload className="h-4 w-4" />}
                    </motion.div>
                  ) : (
                    <Upload className="mr-2 h-4 w-4" />
                  )}
                  {isGeneratingSummary 
                    ? 'Generating AI Summary...' 
                    : isUploading 
                      ? aiSummarizerEnabled 
                        ? 'Uploading Files...' 
                        : 'Uploading...'
                      : 'Submit Study Material'
                  }
                </Button>
              </form>
            </CardContent>
          </Card>
        </motion.div>

        {/* AI Summarizer Status - Always visible below upload form */}
        {(aiSummarizerEnabled || uploadSuccess) && (
          <motion.div
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.5, delay: 0.2 }}
          >
            <Card className="w-full border-blue-200 bg-blue-50">
              <CardContent className="p-4 sm:p-6">
                <div className="flex items-center gap-3 mb-4">
                  <Bot className="h-5 w-5 text-blue-600" />
                  <h3 className="text-lg font-semibold text-blue-800">AI Summarizer</h3>
                </div>

                {uploadSuccess ? (
                  <div className="space-y-4">
                    <div className="flex items-center gap-2 text-sm text-green-700 bg-green-100 p-3 rounded-lg">
                      <CheckCircle className="w-4 h-4" />
                      <span>Study material uploaded successfully!</span>
                    </div>

                    {aiSummarizerEnabled && (
                      <>
                        {summaryGenerated ? (
                          <div className="flex items-center gap-2 text-sm text-green-700 bg-green-100 p-3 rounded-lg">
                            <CheckCircle className="w-4 h-4" />
                            <span>AI summary generated and uploaded successfully!</span>
                          </div>
                        ) : isGeneratingSummary ? (
                          <div className="flex items-center gap-2 text-sm text-blue-700 bg-blue-100 p-3 rounded-lg">
                            <Loader2 className="w-4 h-4 animate-spin" />
                            <span>Generating AI summary... Please wait</span>
                          </div>
                        ) : null}

                        <div className="p-3 bg-gray-50 rounded-lg">
                          <p className="text-xs text-gray-600 mb-2 font-medium">Files uploaded:</p>
                          <ul className="text-xs text-gray-500 space-y-1">
                            <li>• Original study material</li>
                            {summaryGenerated && <li>• AI-generated summary (PDF)</li>}
                          </ul>
                        </div>
                      </>
                    )}

                    <div className="flex flex-col sm:flex-row gap-3">
                      <Button
                        onClick={handleUploadAnother}
                        variant="outline"
                        size="sm"
                        className="flex-1"
                      >
                        Upload Another File
                      </Button>
                      <Button
                        onClick={handleBackToList}
                        size="sm"
                        className="flex-1"
                      >
                        Back to Materials List
                      </Button>
                    </div>
                  </div>
                ) : (
                  <div className="text-sm text-blue-700">
                    <p className="mb-2">AI Summarizer is enabled. When you upload a file, it will:</p>
                    <ul className="text-xs space-y-1 ml-4">
                      <li>• Extract key concepts and important points</li>
                      <li>• Create structured bullet points</li>
                      <li>• Generate PDF summary document</li>
                      <li>• Upload both original and summary files</li>
                    </ul>
                  </div>
                )}
              </CardContent>
            </Card>
          </motion.div>
        )}
      </div>
    </div>
  );
}
