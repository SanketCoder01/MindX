import { NextRequest, NextResponse } from "next/server"

export async function POST(
  request: NextRequest,
  { params }: { params: { id: string } }
) {
  try {
    const reportData = await request.json()

    // Generate HTML content for PDF
    const htmlContent = `
    <!DOCTYPE html>
    <html>
    <head>
        <meta charset="UTF-8">
        <title>Plagiarism Report - ${reportData.assignment.name}</title>
        <style>
            body { font-family: Arial, sans-serif; margin: 20px; line-height: 1.6; }
            .header { text-align: center; border-bottom: 2px solid #333; padding-bottom: 20px; margin-bottom: 30px; }
            .section { margin-bottom: 25px; }
            .section-title { font-size: 18px; font-weight: bold; color: #333; border-bottom: 1px solid #ddd; padding-bottom: 5px; margin-bottom: 15px; }
            .info-grid { display: grid; grid-template-columns: 1fr 1fr; gap: 15px; }
            .info-item { margin-bottom: 10px; }
            .info-label { font-weight: bold; color: #666; }
            .plagiarism-score { text-align: center; font-size: 48px; font-weight: bold; margin: 20px 0; }
            .high-risk { color: #dc2626; }
            .medium-risk { color: #f59e0b; }
            .low-risk { color: #10b981; }
            .status-badge { display: inline-block; padding: 5px 15px; border-radius: 20px; font-size: 12px; font-weight: bold; }
            .status-high { background-color: #fee2e2; color: #dc2626; }
            .status-medium { background-color: #fef3c7; color: #f59e0b; }
            .status-low { background-color: #dcfce7; color: #10b981; }
            .source-item { border: 1px solid #ddd; padding: 15px; margin-bottom: 10px; border-radius: 5px; }
            .footer { text-align: center; margin-top: 40px; padding-top: 20px; border-top: 1px solid #ddd; color: #666; font-size: 12px; }
            .summary-grid { display: grid; grid-template-columns: 1fr 1fr 1fr; gap: 20px; text-align: center; margin: 20px 0; }
            .summary-item { padding: 15px; border-radius: 8px; }
            .original-content { background-color: #dcfce7; color: #166534; }
            .similar-content { background-color: #fee2e2; color: #dc2626; }
            .sources-found { background-color: #dbeafe; color: #1d4ed8; }
        </style>
    </head>
    <body>
        <div class="header">
            <h1>Plagiarism Detection Report</h1>
            <h2>${reportData.assignment.name}</h2>
            <p>Generated by ${reportData.appName}</p>
        </div>

        <div class="section">
            <div class="section-title">Assignment Details</div>
            <div class="info-grid">
                <div class="info-item">
                    <div class="info-label">Assignment Name:</div>
                    <div>${reportData.assignment.name}</div>
                </div>
                <div class="info-item">
                    <div class="info-label">Maximum Marks:</div>
                    <div>${reportData.assignment.maxMarks}</div>
                </div>
                <div class="info-item">
                    <div class="info-label">Date Given:</div>
                    <div>${new Date(reportData.assignment.dateGiven).toLocaleDateString()}</div>
                </div>
                <div class="info-item">
                    <div class="info-label">Due Date:</div>
                    <div>${new Date(reportData.assignment.dueDate).toLocaleDateString()}</div>
                </div>
                <div class="info-item">
                    <div class="info-label">Date Submitted:</div>
                    <div>${new Date(reportData.assignment.dateSubmitted).toLocaleDateString()} at ${new Date(reportData.assignment.dateSubmitted).toLocaleTimeString()}</div>
                </div>
            </div>
        </div>

        <div class="section">
            <div class="section-title">Student Information</div>
            <div class="info-grid">
                <div class="info-item">
                    <div class="info-label">Student Name:</div>
                    <div>${reportData.student.name}</div>
                </div>
                <div class="info-item">
                    <div class="info-label">Email:</div>
                    <div>${reportData.student.email}</div>
                </div>
                <div class="info-item">
                    <div class="info-label">Department:</div>
                    <div>${reportData.student.department}</div>
                </div>
                <div class="info-item">
                    <div class="info-label">Year:</div>
                    <div>${reportData.student.year}</div>
                </div>
            </div>
        </div>

        <div class="section">
            <div class="section-title">Plagiarism Analysis</div>
            <div style="text-align: center;">
                <div class="plagiarism-score ${reportData.plagiarism.percentage > 20 ? 'high-risk' : reportData.plagiarism.percentage > 10 ? 'medium-risk' : 'low-risk'}">
                    ${reportData.plagiarism.percentage}%
                </div>
                <div>Similarity Detected</div>
                <span class="status-badge ${reportData.plagiarism.status === 'High Risk' ? 'status-high' : reportData.plagiarism.status === 'Medium Risk' ? 'status-medium' : 'status-low'}">
                    ${reportData.plagiarism.status}
                </span>
            </div>

            <div class="summary-grid">
                <div class="summary-item original-content">
                    <div style="font-size: 24px; font-weight: bold;">${100 - reportData.plagiarism.percentage}%</div>
                    <div>Original Content</div>
                </div>
                <div class="summary-item similar-content">
                    <div style="font-size: 24px; font-weight: bold;">${reportData.plagiarism.percentage}%</div>
                    <div>Similar Content</div>
                </div>
                <div class="summary-item sources-found">
                    <div style="font-size: 24px; font-weight: bold;">${reportData.plagiarism.sources.length}</div>
                    <div>Sources Found</div>
                </div>
            </div>

            <div class="info-item">
                <div class="info-label">Checked At:</div>
                <div>${new Date(reportData.plagiarism.checkedAt).toLocaleDateString()} at ${new Date(reportData.plagiarism.checkedAt).toLocaleTimeString()}</div>
            </div>
        </div>

        ${reportData.plagiarism.sources.length > 0 ? `
        <div class="section">
            <div class="section-title">Detected Sources</div>
            ${reportData.plagiarism.sources.map((source: any, index: number) => `
                <div class="source-item">
                    <div style="display: flex; justify-content: between; align-items: center; margin-bottom: 10px;">
                        <strong>${source.title}</strong>
                        <span style="background-color: #f3f4f6; padding: 3px 8px; border-radius: 12px; font-size: 12px;">${source.similarity}% similarity</span>
                    </div>
                    <div style="color: #2563eb; font-size: 14px; margin-bottom: 8px;">${source.url}</div>
                    ${source.matchedText ? `
                        <div style="background-color: #f9fafb; padding: 10px; border-radius: 5px; font-style: italic;">
                            <strong>Matched Text:</strong> "${source.matchedText}"
                        </div>
                    ` : ''}
                </div>
            `).join('')}
        </div>
        ` : ''}

        ${(reportData.grading.grade !== undefined || reportData.grading.autoGrade !== undefined) ? `
        <div class="section">
            <div class="section-title">Grading Information</div>
            ${reportData.grading.grade !== undefined ? `
                <div class="info-grid">
                    <div class="info-item">
                        <div class="info-label">Final Grade:</div>
                        <div style="font-size: 20px; font-weight: bold; color: #2563eb;">${reportData.grading.grade}/${reportData.assignment.maxMarks}</div>
                    </div>
                    <div class="info-item">
                        <div class="info-label">Percentage:</div>
                        <div style="font-size: 20px; font-weight: bold; color: #2563eb;">${Math.round((reportData.grading.grade / reportData.assignment.maxMarks) * 100)}%</div>
                    </div>
                </div>
            ` : ''}
            
            ${reportData.grading.autoGrade !== undefined ? `
                <div class="info-item">
                    <div class="info-label">Auto Grade:</div>
                    <div>${reportData.grading.autoGrade}/${reportData.assignment.maxMarks}</div>
                </div>
            ` : ''}

            ${reportData.grading.feedback ? `
                <div class="info-item">
                    <div class="info-label">Feedback:</div>
                    <div style="background-color: #f9fafb; padding: 10px; border-radius: 5px;">${reportData.grading.feedback}</div>
                </div>
            ` : ''}

            ${reportData.grading.gradedAt ? `
                <div class="info-item">
                    <div class="info-label">Graded At:</div>
                    <div>${new Date(reportData.grading.gradedAt).toLocaleDateString()} at ${new Date(reportData.grading.gradedAt).toLocaleTimeString()}</div>
                </div>
            ` : ''}
        </div>
        ` : ''}

        <div class="footer">
            <p>Report generated on ${new Date(reportData.generatedAt).toLocaleDateString()} at ${new Date(reportData.generatedAt).toLocaleTimeString()}</p>
            <p>Powered by ${reportData.appName} Plagiarism Detection System</p>
        </div>
    </body>
    </html>
    `

    // For now, return the HTML content as a downloadable file
    // In a production environment, you would use a PDF generation library like Puppeteer
    const response = new NextResponse(htmlContent, {
      headers: {
        'Content-Type': 'text/html',
        'Content-Disposition': `attachment; filename="plagiarism-report-${reportData.assignment.name.replace(/\s+/g, '-')}.html"`,
      },
    })

    return response
  } catch (error) {
    console.error("Error generating report:", error)
    return NextResponse.json({ error: "Failed to generate report" }, { status: 500 })
  }
}
