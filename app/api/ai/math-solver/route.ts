import { NextRequest, NextResponse } from 'next/server';
import { GoogleGenerativeAI } from '@google/generative-ai';

const genAI = new GoogleGenerativeAI(process.env.GEMINI_API_KEY || '');

export async function POST(request: NextRequest) {
  try {
    const { problem, problemType, image, language = 'english' } = await request.json();

    if (!problem) {
      return NextResponse.json({ error: 'Problem is required' }, { status: 400 });
    }

    let prompt = '';
    const imageText = image ? '\n\nI have also provided an image of the math problem. Please analyze both the text and image to solve the problem.' : '';
    
    if (language === 'marathi') {
      prompt = `‡§§‡•Å‡§Æ‡•ç‡§π‡•Ä ‡§è‡§ï ‡§Ö‡§®‡•Å‡§≠‡§µ‡•Ä ‡§ó‡§£‡§ø‡§§ ‡§∂‡§ø‡§ï‡•ç‡§∑‡§ï ‡§Ü‡§π‡§æ‡§§. ‡§Ø‡§æ ‡§∏‡§Æ‡§∏‡•ç‡§Ø‡•á‡§ö‡•á ‡§∏‡§Ç‡§™‡•Ç‡§∞‡•ç‡§£ ‡§â‡§§‡•ç‡§§‡§∞ ‡§Æ‡§∞‡§æ‡§†‡•Ä‡§§ ‡§¶‡•ç‡§Ø‡§æ: "${problem}". 

‡§Ü‡§µ‡§∂‡•ç‡§Ø‡§ï‡§§‡§æ:
- ‡§™‡§æ‡§Ø‡§∞‡•Ä ‡§¶‡§∞ ‡§™‡§æ‡§Ø‡§∞‡•Ä ‡§Ö‡§§‡§ø‡§∂‡§Ø ‡§∏‡•ã‡§™‡•ç‡§Ø‡§æ ‡§≠‡§æ‡§∑‡•á‡§§ ‡§∏‡§Æ‡§ú‡§æ‡§µ‡•Ç‡§® ‡§∏‡§æ‡§Ç‡§ó
- ‡§™‡•ç‡§∞‡§§‡•ç‡§Ø‡•á‡§ï ‡§™‡§æ‡§Ø‡§∞‡•Ä‡§ö‡•á ‡§ï‡§æ‡§∞‡§£ ‡§∏‡•ç‡§™‡§∑‡•ç‡§ü ‡§ï‡§∞‡§æ
- ${problemType} ‡§ö‡•ç‡§Ø‡§æ ‡§®‡§ø‡§Ø‡§Æ‡§æ‡§Ç‡§ö‡§æ ‡§µ‡§æ‡§™‡§∞ ‡§ï‡§∞‡§æ
- ‡§â‡§¶‡§æ‡§π‡§∞‡§£‡•á ‡§¶‡•ç‡§Ø‡§æ
- ‡§∏‡§æ‡§Æ‡§æ‡§®‡•ç‡§Ø ‡§ö‡•Å‡§ï‡§æ ‡§ü‡§æ‡§≥‡§£‡•ç‡§Ø‡§æ‡§ö‡•á ‡§Æ‡§æ‡§∞‡•ç‡§ó ‡§∏‡§æ‡§Ç‡§ó‡§æ${imageText}`;
    } else if (language === 'hindi') {
      prompt = `‡§Ü‡§™ ‡§è‡§ï ‡§Ö‡§®‡•Å‡§≠‡§µ‡•Ä ‡§ó‡§£‡§ø‡§§ ‡§∂‡§ø‡§ï‡•ç‡§∑‡§ï ‡§π‡•à‡§Ç‡•§ ‡§á‡§∏ ‡§∏‡§Æ‡§∏‡•ç‡§Ø‡§æ ‡§ï‡§æ ‡§∏‡§Ç‡§™‡•Ç‡§∞‡•ç‡§£ ‡§∏‡§Æ‡§æ‡§ß‡§æ‡§® ‡§π‡§ø‡§Ç‡§¶‡•Ä ‡§Æ‡•á‡§Ç ‡§¶‡•á‡§Ç: "${problem}"‡•§

‡§Ü‡§µ‡§∂‡•ç‡§Ø‡§ï‡§§‡§æ‡§è‡§Ç:
- ‡§ï‡§¶‡§Æ ‡§¶‡§∞ ‡§ï‡§¶‡§Æ ‡§¨‡§π‡•Å‡§§ ‡§∏‡§∞‡§≤ ‡§≠‡§æ‡§∑‡§æ ‡§Æ‡•á‡§Ç ‡§∏‡§Æ‡§ù‡§æ‡§è‡§Ç
- ‡§π‡§∞ ‡§ï‡§¶‡§Æ ‡§ï‡§æ ‡§ï‡§æ‡§∞‡§£ ‡§∏‡•ç‡§™‡§∑‡•ç‡§ü ‡§ï‡§∞‡•á‡§Ç
- ${problemType} ‡§ï‡•á ‡§®‡§ø‡§Ø‡§Æ‡•ã‡§Ç ‡§ï‡§æ ‡§â‡§™‡§Ø‡•ã‡§ó ‡§ï‡§∞‡•á‡§Ç
- ‡§â‡§¶‡§æ‡§π‡§∞‡§£ ‡§¶‡•á‡§Ç
- ‡§∏‡§æ‡§Æ‡§æ‡§®‡•ç‡§Ø ‡§ó‡§≤‡§§‡§ø‡§Ø‡•ã‡§Ç ‡§∏‡•á ‡§¨‡§ö‡§®‡•á ‡§ï‡•á ‡§§‡§∞‡•Ä‡§ï‡•á ‡§¨‡§§‡§æ‡§è‡§Ç${imageText}`;
    } else {
      prompt = `You are an experienced math teacher. Solve this ${problemType} problem with complete explanation: "${problem}".

Requirements:
- Explain step by step in VERY SIMPLE language
- Show WHY each step works
- Use ${problemType} rules and formulas
- Provide examples where helpful
- Highlight common mistakes to avoid
- Make it understandable for any student level

Format:
PROBLEM: [restate clearly]
STEP-BY-STEP SOLUTION:
Step 1: [action] - [why we do this]
Step 2: [action] - [why we do this]
...
FINAL ANSWER: [clear answer]
KEY CONCEPTS: [important formulas/rules used]
COMMON MISTAKES: [what students often get wrong]${imageText}`;
    }

    let response = '';

    // Use Gemini as primary AI service with image support
    if (process.env.GEMINI_API_KEY) {
      try {
        console.log(' Solving math problem with Gemini...');
        const model = genAI.getGenerativeModel({ 
          model: 'gemini-1.5-flash',
          generationConfig: {
            temperature: 0.1,
            topP: 0.8,
            topK: 40,
            maxOutputTokens: 2000,
          }
        });
        
        let parts: any[] = [{ text: prompt }];
        
        // Add image if provided
        if (image) {
          console.log('üì∏ Processing math problem image...');
          const base64Data = image.split(',')[1]; // Remove data:image/jpeg;base64, prefix
          parts.push({
            inlineData: {
              mimeType: image.split(';')[0].split(':')[1], // Extract mime type
              data: base64Data
            }
          });
        }
        
        const result = await model.generateContent(parts);
        response = result.response.text();
        console.log(' Math solution generated successfully');
      } catch (error: any) {
        console.log(' Gemini failed:', error?.message || 'Unknown error');
      }
    } else {
      console.log(' No Gemini API key found');
    }

    // Fallback response
    if (!response) {
      response = `PROBLEM: ${problem}

SOLUTION STEPS:
Step 1: Identify what we need to find
Step 2: Write down what we know
Step 3: Choose the right formula or method
Step 4: Substitute the values
Step 5: Calculate step by step
Step 6: Check our answer

FINAL ANSWER: [Solution will be provided based on the specific problem]

EXPLANATION: This is a ${problemType} problem that requires systematic approach. Break it down into smaller parts and solve each part carefully.

Note: For specific numerical solutions, please provide the exact problem details.`;
    }

    return NextResponse.json({ 
      success: true, 
      solution: response,
      problem,
      problemType,
      language
    });

  } catch (error) {
    console.error('Error solving math problem:', error);
    return NextResponse.json(
      { error: 'Failed to solve math problem' },
      { status: 500 }
    );
  }
}
