import { NextRequest, NextResponse } from 'next/server';
import { GoogleGenerativeAI } from '@google/generative-ai';

const genAI = new GoogleGenerativeAI(process.env.GEMINI_API_KEY || '');

export async function POST(request: NextRequest) {
  try {
    const { topic, format, language = 'english' } = await request.json();

    if (!topic) {
      return NextResponse.json({ error: 'Topic is required' }, { status: 400 });
    }

    let prompt = '';
    if (language === 'marathi') {
      prompt = `‡§§‡•Å‡§Æ‡•ç‡§π‡•Ä ‡§è‡§ï ‡§Ö‡§®‡•Å‡§≠‡§µ‡•Ä ‡§∂‡§ø‡§ï‡•ç‡§∑‡§ï ‡§Ü‡§π‡§æ‡§§. "${topic}" ‡§Ø‡§æ ‡§µ‡§ø‡§∑‡§Ø‡§æ‡§µ‡§∞ ‡§Æ‡§∞‡§æ‡§†‡•Ä‡§§ ‡§∏‡§Ç‡§™‡•Ç‡§∞‡•ç‡§£ ${format} ‡§§‡§Ø‡§æ‡§∞ ‡§ï‡§∞‡§æ. 

‡§Ü‡§µ‡§∂‡•ç‡§Ø‡§ï‡§§‡§æ:
- ‡§Ö‡§§‡§ø‡§∂‡§Ø ‡§∏‡•ã‡§™‡•ç‡§Ø‡§æ ‡§≠‡§æ‡§∑‡•á‡§§ ‡§≤‡§ø‡§π‡§æ
- ‡§∏‡§∞‡•ç‡§µ ‡§Æ‡§π‡§§‡•ç‡§µ‡§æ‡§ö‡•á ‡§Æ‡•Å‡§¶‡•ç‡§¶‡•á ‡§∏‡§Æ‡§æ‡§µ‡§ø‡§∑‡•ç‡§ü ‡§ï‡§∞‡§æ
- ‡§â‡§¶‡§æ‡§π‡§∞‡§£‡•á ‡§¶‡•ç‡§Ø‡§æ
- ‡§Æ‡•Å‡§ñ‡•ç‡§Ø ‡§∏‡§Ç‡§ï‡§≤‡•ç‡§™‡§®‡§æ ‡§∏‡•ç‡§™‡§∑‡•ç‡§ü ‡§ï‡§∞‡§æ
- ‡§µ‡•ç‡§Ø‡§æ‡§µ‡§π‡§æ‡§∞‡§ø‡§ï ‡§Ö‡§®‡•Å‡§™‡•ç‡§∞‡§Ø‡•ã‡§ó ‡§¶‡§æ‡§ñ‡§µ‡§æ
- ‡§™‡§∞‡•Ä‡§ï‡•ç‡§∑‡•á‡§∏‡§æ‡§†‡•Ä ‡§Æ‡§π‡§§‡•ç‡§µ‡§æ‡§ö‡•á ‡§Æ‡•Å‡§¶‡•ç‡§¶‡•á ‡§π‡§æ‡§Ø‡§≤‡§æ‡§á‡§ü ‡§ï‡§∞‡§æ`;
    } else if (language === 'hindi') {
      prompt = `‡§Ü‡§™ ‡§è‡§ï ‡§Ö‡§®‡•Å‡§≠‡§µ‡•Ä ‡§∂‡§ø‡§ï‡•ç‡§∑‡§ï ‡§π‡•à‡§Ç‡•§ "${topic}" ‡§µ‡§ø‡§∑‡§Ø ‡§™‡§∞ ‡§π‡§ø‡§Ç‡§¶‡•Ä ‡§Æ‡•á‡§Ç ‡§µ‡§ø‡§∏‡•ç‡§§‡•É‡§§ ${format} ‡§§‡•à‡§Ø‡§æ‡§∞ ‡§ï‡§∞‡•á‡§Ç‡•§

‡§Ü‡§µ‡§∂‡•ç‡§Ø‡§ï‡§§‡§æ‡§è‡§Ç:
- ‡§¨‡§π‡•Å‡§§ ‡§∏‡§∞‡§≤ ‡§≠‡§æ‡§∑‡§æ ‡§Æ‡•á‡§Ç ‡§≤‡§ø‡§ñ‡•á‡§Ç
- ‡§∏‡§≠‡•Ä ‡§Æ‡§π‡§§‡•ç‡§µ‡§™‡•Ç‡§∞‡•ç‡§£ ‡§¨‡§ø‡§Ç‡§¶‡•Å‡§ì‡§Ç ‡§ï‡•ã ‡§∂‡§æ‡§Æ‡§ø‡§≤ ‡§ï‡§∞‡•á‡§Ç
- ‡§â‡§¶‡§æ‡§π‡§∞‡§£ ‡§¶‡•á‡§Ç
- ‡§Æ‡•Å‡§ñ‡•ç‡§Ø ‡§Ö‡§µ‡§ß‡§æ‡§∞‡§£‡§æ‡§ì‡§Ç ‡§ï‡•ã ‡§∏‡•ç‡§™‡§∑‡•ç‡§ü ‡§ï‡§∞‡•á‡§Ç
- ‡§µ‡•ç‡§Ø‡§æ‡§µ‡§π‡§æ‡§∞‡§ø‡§ï ‡§Ö‡§®‡•Å‡§™‡•ç‡§∞‡§Ø‡•ã‡§ó ‡§¶‡§ø‡§ñ‡§æ‡§è‡§Ç
- ‡§™‡§∞‡•Ä‡§ï‡•ç‡§∑‡§æ ‡§ï‡•á ‡§≤‡§ø‡§è ‡§Æ‡§π‡§§‡•ç‡§µ‡§™‡•Ç‡§∞‡•ç‡§£ ‡§¨‡§ø‡§Ç‡§¶‡•Å‡§ì‡§Ç ‡§ï‡•ã ‡§π‡§æ‡§á‡§≤‡§æ‡§á‡§ü ‡§ï‡§∞‡•á‡§Ç`;
    } else {
      prompt = `You are an experienced teacher. Create comprehensive and detailed ${format} on "${topic}" in very simple language.

Requirements:
- Use extremely simple language that any student can understand
- Include ALL important points and concepts
- Provide clear examples and analogies
- Break down complex ideas into simple steps
- Include practical applications and real-world examples
- Highlight key points for exams
- Use bullet points and clear structure
- Add memory tricks or mnemonics where helpful
- Include common mistakes to avoid
- Provide practice questions if applicable

Make it complete, thorough, and student-friendly.`;
    }

    let response = '';

    // Use Gemini as primary AI service
    if (process.env.GEMINI_API_KEY) {
      try {
        console.log('üìö Generating comprehensive notes with Gemini...');
        const model = genAI.getGenerativeModel({ 
          model: 'gemini-1.5-flash',
          generationConfig: {
            temperature: 0.2,
            topP: 0.8,
            topK: 40,
            maxOutputTokens: 3000,
          }
        });
        const result = await model.generateContent(prompt);
        response = result.response.text();
        console.log('‚úÖ Comprehensive notes generated successfully');
      } catch (error: any) {
        console.log('‚ùå Gemini failed:', error?.message || 'Unknown error');
      }
    } else {
      console.log('‚ùå No Gemini API key found');
    }

    // Fallback response
    if (!response) {
      response = `Study Notes: ${topic}

Overview:
This topic covers important concepts that students need to understand.

Key Points:
‚Ä¢ Main concept 1 - explained in simple terms
‚Ä¢ Main concept 2 - with practical examples  
‚Ä¢ Main concept 3 - step by step breakdown
‚Ä¢ Important formulas or rules to remember
‚Ä¢ Common mistakes to avoid

Summary:
Understanding ${topic} requires practice and regular review. Focus on the key concepts and practice with examples.`;
    }

    return NextResponse.json({ 
      success: true, 
      content: response,
      topic,
      format,
      language
    });

  } catch (error) {
    console.error('Error generating notes:', error);
    return NextResponse.json(
      { error: 'Failed to generate notes' },
      { status: 500 }
    );
  }
}
