import { NextRequest, NextResponse } from 'next/server';
import { GoogleGenerativeAI } from '@google/generative-ai';

const genAI = new GoogleGenerativeAI(process.env.GEMINI_API_KEY || '');

export async function POST(request: NextRequest) {
  let prompt = '';
  let subject = '';
  let difficulty = '';
  
  try {
    const requestData = await request.json();
    prompt = requestData.prompt;
    subject = requestData.subject;
    difficulty = requestData.difficulty;
    const { assignmentType, language = 'english' } = requestData;

    if (!prompt) {
      return NextResponse.json(
        { error: 'Prompt is required' },
        { status: 400 }
      );
    }

    if (!process.env.GEMINI_API_KEY) {
      return NextResponse.json(
        { error: 'Gemini API key not configured' },
        { status: 500 }
      );
    }

    let systemPrompt = '';
    let userPrompt = '';

    if (language === 'marathi') {
      systemPrompt = '‡§§‡•Å‡§Æ‡•ç‡§π‡•Ä ‡§è‡§ï ‡§Ö‡§®‡•Å‡§≠‡§µ‡•Ä ‡§∂‡•à‡§ï‡•ç‡§∑‡§£‡§ø‡§ï ‡§∏‡§æ‡§Æ‡§ó‡•ç‡§∞‡•Ä ‡§®‡§ø‡§∞‡•ç‡§Æ‡§æ‡§§‡§æ ‡§Ü‡§π‡§æ‡§§. ‡§∂‡•à‡§ï‡•ç‡§∑‡§£‡§ø‡§ï, ‡§Ü‡§ï‡§∞‡•ç‡§∑‡§ï ‡§Ü‡§£‡§ø ‡§∏‡•Å‡§µ‡•ç‡§Ø‡§µ‡§∏‡•ç‡§•‡§ø‡§§ ‡§Ö‡§∏‡§æ‡§á‡§®‡§Æ‡•á‡§Ç‡§ü ‡§§‡§Ø‡§æ‡§∞ ‡§ï‡§∞‡§æ.';
      userPrompt = `‡§ñ‡§æ‡§≤‡•Ä‡§≤ ‡§Ü‡§µ‡§∂‡•ç‡§Ø‡§ï‡§§‡§æ‡§Ç‡§µ‡§∞ ‡§Ü‡§ß‡§æ‡§∞‡§ø‡§§ ‡§∏‡§Ç‡§™‡•Ç‡§∞‡•ç‡§£ ‡§Ö‡§∏‡§æ‡§á‡§®‡§Æ‡•á‡§Ç‡§ü ‡§§‡§Ø‡§æ‡§∞ ‡§ï‡§∞‡§æ:

‡§µ‡§ø‡§∑‡§Ø: ${subject || '‡§∏‡§æ‡§Æ‡§æ‡§®‡•ç‡§Ø'}
‡§ï‡§†‡§ø‡§£‡§æ‡§à: ${difficulty || '‡§Æ‡§ß‡•ç‡§Ø‡§Æ'}
‡§™‡•ç‡§∞‡§ï‡§æ‡§∞: ${assignmentType || '‡§Æ‡§ø‡§∂‡•ç‡§∞'}

‡§µ‡§æ‡§™‡§∞‡§ï‡§∞‡•ç‡§§‡•ç‡§Ø‡§æ‡§ö‡•Ä ‡§µ‡§ø‡§®‡§Ç‡§§‡•Ä: ${prompt}

‡§ï‡•É‡§™‡§Ø‡§æ ‡§ñ‡§æ‡§≤‡•Ä‡§≤ ‡§∏‡§Ç‡§∞‡§ö‡§®‡•á‡§∏‡§π ‡§§‡§™‡§∂‡•Ä‡§≤‡§µ‡§æ‡§∞ ‡§Ö‡§∏‡§æ‡§á‡§®‡§Æ‡•á‡§Ç‡§ü ‡§§‡§Ø‡§æ‡§∞ ‡§ï‡§∞‡§æ:
1. ‡§Ö‡§∏‡§æ‡§á‡§®‡§Æ‡•á‡§Ç‡§ü ‡§∂‡•Ä‡§∞‡•ç‡§∑‡§ï
2. ‡§§‡§™‡§∂‡•Ä‡§≤‡§µ‡§æ‡§∞ ‡§µ‡§∞‡•ç‡§£‡§® (‡§â‡§¶‡•ç‡§¶‡§ø‡§∑‡•ç‡§ü‡•á ‡§Ü‡§£‡§ø ‡§∏‡§Ç‡§¶‡§∞‡•ç‡§≠)
3. ‡§Æ‡•Å‡§ñ‡•ç‡§Ø ‡§™‡•ç‡§∞‡§∂‡•ç‡§®/‡§∏‡§Æ‡§∏‡•ç‡§Ø‡§æ ‡§µ‡§ø‡§ß‡§æ‡§®
4. ‡§™‡§æ‡§Ø‡§∞‡•Ä ‡§¶‡§∞ ‡§™‡§æ‡§Ø‡§∞‡•Ä ‡§∏‡•Ç‡§ö‡§®‡§æ
5. ‡§®‡§ø‡§Ø‡§Æ ‡§Ü‡§£‡§ø ‡§Æ‡§æ‡§∞‡•ç‡§ó‡§¶‡§∞‡•ç‡§∂‡§ï ‡§§‡§§‡•ç‡§§‡•ç‡§µ‡•á
6. ‡§Æ‡•Ç‡§≤‡•ç‡§Ø‡§Æ‡§æ‡§™‡§® ‡§®‡§ø‡§ï‡§∑

‡§Ö‡§∏‡§æ‡§á‡§®‡§Æ‡•á‡§Ç‡§ü ‡§∂‡•à‡§ï‡•ç‡§∑‡§£‡§ø‡§ï, ‡§Ü‡§ï‡§∞‡•ç‡§∑‡§ï ‡§Ü‡§£‡§ø ‡§®‡§ø‡§∞‡•ç‡§¶‡§ø‡§∑‡•ç‡§ü ‡§ï‡§†‡§ø‡§£‡§æ‡§à ‡§∏‡•ç‡§§‡§∞‡§æ‡§∏‡§æ‡§†‡•Ä ‡§Ø‡•ã‡§ó‡•ç‡§Ø ‡§¨‡§®‡§µ‡§æ.`;
    } else if (language === 'hindi') {
      systemPrompt = '‡§Ü‡§™ ‡§è‡§ï ‡§Ö‡§®‡•Å‡§≠‡§µ‡•Ä ‡§∂‡•à‡§ï‡•ç‡§∑‡§£‡§ø‡§ï ‡§∏‡§æ‡§Æ‡§ó‡•ç‡§∞‡•Ä ‡§®‡§ø‡§∞‡•ç‡§Æ‡§æ‡§§‡§æ ‡§π‡•à‡§Ç‡•§ ‡§∂‡•à‡§ï‡•ç‡§∑‡§£‡§ø‡§ï, ‡§Ü‡§ï‡§∞‡•ç‡§∑‡§ï ‡§î‡§∞ ‡§∏‡•Å‡§µ‡•ç‡§Ø‡§µ‡§∏‡•ç‡§•‡§ø‡§§ ‡§Ö‡§∏‡§æ‡§á‡§®‡§Æ‡•á‡§Ç‡§ü ‡§¨‡§®‡§æ‡§è‡§Ç‡•§';
      userPrompt = `‡§®‡§ø‡§Æ‡•ç‡§®‡§≤‡§ø‡§ñ‡§ø‡§§ ‡§Ü‡§µ‡§∂‡•ç‡§Ø‡§ï‡§§‡§æ‡§ì‡§Ç ‡§ï‡•á ‡§Ü‡§ß‡§æ‡§∞ ‡§™‡§∞ ‡§µ‡•ç‡§Ø‡§æ‡§™‡§ï ‡§Ö‡§∏‡§æ‡§á‡§®‡§Æ‡•á‡§Ç‡§ü ‡§¨‡§®‡§æ‡§è‡§Ç:

‡§µ‡§ø‡§∑‡§Ø: ${subject || '‡§∏‡§æ‡§Æ‡§æ‡§®‡•ç‡§Ø'}
‡§ï‡§†‡§ø‡§®‡§æ‡§à: ${difficulty || '‡§Æ‡§ß‡•ç‡§Ø‡§Æ'}
‡§™‡•ç‡§∞‡§ï‡§æ‡§∞: ${assignmentType || '‡§Æ‡§ø‡§∂‡•ç‡§∞‡§ø‡§§'}

‡§â‡§™‡§Ø‡•ã‡§ó‡§ï‡§∞‡•ç‡§§‡§æ ‡§Ö‡§®‡•Å‡§∞‡•ã‡§ß: ${prompt}

‡§ï‡•É‡§™‡§Ø‡§æ ‡§®‡§ø‡§Æ‡•ç‡§®‡§≤‡§ø‡§ñ‡§ø‡§§ ‡§∏‡§Ç‡§∞‡§ö‡§®‡§æ ‡§ï‡•á ‡§∏‡§æ‡§• ‡§µ‡§ø‡§∏‡•ç‡§§‡•É‡§§ ‡§Ö‡§∏‡§æ‡§á‡§®‡§Æ‡•á‡§Ç‡§ü ‡§§‡•à‡§Ø‡§æ‡§∞ ‡§ï‡§∞‡•á‡§Ç:
1. ‡§Ö‡§∏‡§æ‡§á‡§®‡§Æ‡•á‡§Ç‡§ü ‡§∂‡•Ä‡§∞‡•ç‡§∑‡§ï
2. ‡§µ‡§ø‡§∏‡•ç‡§§‡•É‡§§ ‡§µ‡§ø‡§µ‡§∞‡§£ (‡§â‡§¶‡•ç‡§¶‡•á‡§∂‡•ç‡§Ø ‡§î‡§∞ ‡§∏‡§Ç‡§¶‡§∞‡•ç‡§≠)
3. ‡§Æ‡•Å‡§ñ‡•ç‡§Ø ‡§™‡•ç‡§∞‡§∂‡•ç‡§®/‡§∏‡§Æ‡§∏‡•ç‡§Ø‡§æ ‡§ï‡§•‡§®
4. ‡§ö‡§∞‡§£‡§¨‡§¶‡•ç‡§ß ‡§®‡§ø‡§∞‡•ç‡§¶‡•á‡§∂
5. ‡§®‡§ø‡§Ø‡§Æ ‡§î‡§∞ ‡§¶‡§ø‡§∂‡§æ‡§®‡§ø‡§∞‡•ç‡§¶‡•á‡§∂
6. ‡§Æ‡•Ç‡§≤‡•ç‡§Ø‡§æ‡§Ç‡§ï‡§® ‡§Æ‡§æ‡§®‡§¶‡§Ç‡§°

‡§Ö‡§∏‡§æ‡§á‡§®‡§Æ‡•á‡§Ç‡§ü ‡§ï‡•ã ‡§∂‡•à‡§ï‡•ç‡§∑‡§£‡§ø‡§ï, ‡§Ü‡§ï‡§∞‡•ç‡§∑‡§ï ‡§î‡§∞ ‡§®‡§ø‡§∞‡•ç‡§¶‡§ø‡§∑‡•ç‡§ü ‡§ï‡§†‡§ø‡§®‡§æ‡§à ‡§∏‡•ç‡§§‡§∞ ‡§ï‡•á ‡§≤‡§ø‡§è ‡§â‡§™‡§Ø‡•Å‡§ï‡•ç‡§§ ‡§¨‡§®‡§æ‡§è‡§Ç‡•§`;
    } else {
      systemPrompt = 'You are an expert educational content creator. Generate comprehensive assignments that are educational, engaging, and well-structured.';
      userPrompt = `Create a comprehensive assignment based on the following requirements:

Subject: ${subject || 'General'}
Difficulty: ${difficulty || 'medium'}
Type: ${assignmentType || 'mixed'}

User Request: ${prompt}

Please generate a detailed assignment with the following structure:
1. Assignment Title
2. Detailed Description (objectives and context)
3. Main Question/Problem Statement
4. Step-by-step Instructions
5. Rules and Guidelines
6. Evaluation Criteria

Make the assignment educational, engaging, and appropriate for the specified difficulty level. Include specific requirements, constraints, and expected deliverables.`;
    }

    // Use Gemini for assignment generation
    console.log('üìù Generating assignment with Gemini...');
    const model = genAI.getGenerativeModel({ 
      model: 'gemini-1.5-flash',
      generationConfig: {
        temperature: 0.7,
        topP: 0.8,
        topK: 40,
        maxOutputTokens: 2000,
      }
    });

    const result = await model.generateContent(`${systemPrompt}\n\n${userPrompt}`);
    const aiResponse = result.response.text();
    console.log('‚úÖ Assignment generated successfully');
    
    if (!aiResponse || aiResponse.length < 50) {
      // If AI response is too short, use fallback
      const fallbackData = generateFallbackAssignment(prompt, subject, difficulty);
      return NextResponse.json({
        success: true,
        data: fallbackData
      });
    }
    
    // Extract structured data from AI response
    const assignmentData = parseAssignmentResponse(aiResponse, prompt, subject, difficulty);

    return NextResponse.json({
      success: true,
      data: assignmentData
    });

  } catch (error) {
    console.error('‚ùå Assignment generation error:', error);
    
    // More detailed error information
    const errorDetails = {
      message: error instanceof Error ? error.message : 'Unknown error',
      stack: error instanceof Error ? error.stack : undefined,
      geminiApiKey: process.env.GEMINI_API_KEY ? 'Present' : 'Missing',
      timestamp: new Date().toISOString()
    };
    
    console.error('üîç Detailed error info:', errorDetails);
    
    // Fallback assignment generation
    const fallbackData = generateFallbackAssignment(prompt, subject, difficulty);
    
    return NextResponse.json({
      success: true,
      data: fallbackData,
      source: 'fallback'
    });
  }
}

function parseAssignmentResponse(aiResponse: string, originalPrompt: string, subject?: string, difficulty?: string) {
  // Extract title from AI response or generate one
  const titleMatch = aiResponse.match(/(?:Title|Assignment Title)[:\-]\s*(.+?)(?:\n|$)/i);
  const title = titleMatch ? titleMatch[1].trim() : generateTitleFromPrompt(originalPrompt);

  // Extract description
  const descriptionMatch = aiResponse.match(/(?:Description|Detailed Description)[:\-]\s*([\s\S]*?)(?:\n(?:\d+\.|[A-Z][a-z]+ [A-Z])|$)/i);
  const description = descriptionMatch ? descriptionMatch[1].trim() : `Assignment on ${subject || 'the specified topic'} with ${difficulty || 'medium'} difficulty level.`;

  // Extract main question
  const questionMatch = aiResponse.match(/(?:Question|Problem Statement|Main Question)[:\-]\s*([\s\S]*?)(?:\n(?:\d+\.|[A-Z][a-z]+ [A-Z])|$)/i);
  const question = questionMatch ? questionMatch[1].trim() : extractMainContent(aiResponse);

  // Extract instructions
  const instructionsMatch = aiResponse.match(/(?:Instructions|Step-by-step Instructions)[:\-]\s*([\s\S]*?)(?:\n(?:\d+\.|[A-Z][a-z]+ [A-Z])|$)/i);
  const instructions = instructionsMatch ? instructionsMatch[1].trim() : 'Follow the assignment requirements and submit your work by the due date.';

  // Extract rules
  const rulesMatch = aiResponse.match(/(?:Rules|Guidelines|Rules and Guidelines)[:\-]\s*([\s\S]*?)(?:\n(?:\d+\.|[A-Z][a-z]+ [A-Z])|$)/i);
  const rules = rulesMatch ? rulesMatch[1].trim() : 'Ensure original work and proper citations where applicable.';

  return {
    title,
    description,
    question,
    instructions,
    rules,
    generatedAt: new Date().toISOString(),
    source: 'Gemini AI',
    originalPrompt
  };
}

function generateTitleFromPrompt(prompt: string): string {
  // Extract key terms from prompt to generate title
  const words = prompt.split(' ').filter(word => word.length > 3);
  const keyWords = words.slice(0, 4).join(' ');
  return `Assignment: ${keyWords}`;
}

function generateFallbackAssignment(prompt: string, subject?: string, difficulty?: string) {
  const title = `Assignment: ${prompt.split(' ').slice(0, 6).join(' ')}`;
  const description = `This assignment focuses on ${prompt.toLowerCase()}. Students will demonstrate their understanding of key concepts in ${subject || 'the subject area'} through comprehensive analysis and practical application.`;
  
  let instructions = "1. Read the requirements carefully\n2. Plan your approach before starting\n3. Show your work and reasoning\n4. Submit by the due date";
  
  if (prompt.toLowerCase().includes('program') || prompt.toLowerCase().includes('code')) {
    instructions = "1. Write clean, well-documented code\n2. Test your solution thoroughly\n3. Submit source code and documentation\n4. Follow coding best practices";
  } else if (prompt.toLowerCase().includes('essay') || prompt.toLowerCase().includes('write')) {
    instructions = "1. Structure your response clearly with introduction, body, and conclusion\n2. Support arguments with evidence\n3. Cite sources properly\n4. Proofread before submission";
  }

  return {
    title,
    description,
    question: prompt,
    instructions,
    rules: "Ensure originality and proper citations. Follow academic integrity guidelines.",
    generatedAt: new Date().toISOString(),
    source: 'Fallback Generator',
    originalPrompt: prompt
  };
}

function extractMainContent(response: string): string {
  // If structured parsing fails, return the main content
  const lines = response.split('\n').filter(line => line.trim().length > 0);
  const contentLines = lines.filter(line => 
    !line.match(/^(Title|Description|Instructions|Rules|Guidelines):/i) &&
    line.length > 20
  );
  
  return contentLines.slice(0, 3).join('\n\n') || response.substring(0, 500);
}
