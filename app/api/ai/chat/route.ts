import { NextRequest, NextResponse } from 'next/server';
import { GoogleGenerativeAI } from '@google/generative-ai';

const genAI = new GoogleGenerativeAI(process.env.GEMINI_API_KEY || '');

export async function POST(request: NextRequest) {
  try {
    const { message, language = 'english' } = await request.json();

    if (!message) {
      return NextResponse.json({ error: 'Message is required' }, { status: 400 });
    }

    let systemPrompt = '';
    if (language === 'marathi') {
      systemPrompt = 'рддреБрдореНрд╣реА рдПрдХ рдорджрддрдЧрд╛рд░ AI рд╢рд┐рдХреНрд╖рдХ рдЖрд╣рд╛рдд. рд╡рд┐рджреНрдпрд╛рд░реНрдереНрдпрд╛рдВрдирд╛ рдорд░рд╛рдареАрдд рд╕реЛрдкреНрдпрд╛ рднрд╛рд╖реЗрдд рдЙрддреНрддрд░ рджреНрдпрд╛.';
    } else if (language === 'hindi') {
      systemPrompt = 'рдЖрдк рдПрдХ рд╕рд╣рд╛рдпрдХ AI рд╢рд┐рдХреНрд╖рдХ рд╣реИрдВред рдЫрд╛рддреНрд░реЛрдВ рдХреЛ рд╣рд┐рдВрджреА рдореЗрдВ рд╕рд░рд▓ рднрд╛рд╖рд╛ рдореЗрдВ рдЙрддреНрддрд░ рджреЗрдВред';
    } else {
      systemPrompt = 'You are a helpful AI learning assistant. Answer student questions in simple, clear language.';
    }

    let response = '';

    // Use Gemini as primary AI service
    if (process.env.GEMINI_API_KEY) {
      try {
        console.log('ЁЯЪА Using Gemini as primary AI service');
        console.log('ЁЯФС API Key check:', process.env.GEMINI_API_KEY ? `Present (${process.env.GEMINI_API_KEY.substring(0, 10)}...)` : 'Missing');
        
        const model = genAI.getGenerativeModel({ 
          model: 'gemini-1.5-flash',
          generationConfig: {
            temperature: 0.3,
            topP: 0.8,
            topK: 40,
            maxOutputTokens: 1000,
          }
        });
        
        const prompt = `${systemPrompt}\n\nStudent question: ${message}`;
        console.log('ЁЯУЭ Sending prompt to Gemini...');
        
        const result = await model.generateContent(prompt);
        response = result.response.text();
        console.log('тЬЕ Gemini response generated successfully');
        console.log('ЁЯУК Response length:', response.length, 'characters');
      } catch (error: any) {
        console.log('тЭМ Gemini failed:', error?.message || 'Unknown error');
        console.log('ЁЯФН Error details:', {
          name: error?.name,
          message: error?.message,
          status: error?.status,
          statusText: error?.statusText
        });
      }
    } else {
      console.log('тЭМ No Gemini API key found in environment variables');
    }

    // Fallback response
    if (!response) {
      console.log('тЪая╕П Gemini API failed - using fallback response');
      if (language === 'marathi') {
        response = 'рдорд▓рд╛ рдорд╛рдл рдХрд░рд╛, рдореА рд╕рдзреНрдпрд╛ рддреБрдордЪреНрдпрд╛ рдкреНрд░рд╢реНрдирд╛рдЪреЗ рдЙрддреНрддрд░ рджреЗрдК рд╢рдХрдд рдирд╛рд╣реА. рдХреГрдкрдпрд╛ рдкреБрдиреНрд╣рд╛ рдкреНрд░рдпрддреНрди рдХрд░рд╛.';
      } else if (language === 'hindi') {
        response = 'рдореБрдЭреЗ рдЦреЗрдж рд╣реИ, рдореИрдВ рдЕрднреА рдЖрдкрдХреЗ рдкреНрд░рд╢реНрди рдХрд╛ рдЙрддреНрддрд░ рдирд╣реАрдВ рджреЗ рд╕рдХрддрд╛ред рдХреГрдкрдпрд╛ рдлрд┐рд░ рд╕реЗ рдкреНрд░рдпрд╛рд╕ рдХрд░реЗрдВред';
      } else {
        response = 'I apologize, but I cannot answer your question right now. Please try again or rephrase your question.';
      }
    }

    return NextResponse.json({ 
      success: true, 
      response,
      language
    });

  } catch (error) {
    console.error('Error in chat:', error);
    return NextResponse.json(
      { error: 'Failed to process chat message' },
      { status: 500 }
    );
  }
}
